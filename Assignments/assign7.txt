1)
char *strdupl(const char *s) {
        int i;
        for (i = 0; s[i] != '\0'; i++);
        char *p = (char *)malloc(sizeof(char) * (i + 1));
        for (int j = 0; j <= i; j++)
                p[j] = s[j];
        return p;
}

2)
char *strconcat(char *dest, const char *src) {
        char *p;
        for (p = dest; *p != '\0'; p++);
        for (int i = 0; src[i] != '\0'; i++, p++) {
                *p = src[i];
        }
        return dest;
}

3)
char *inttostring(int x) {
        int y = x, digits = 0, i = 0, sign;
        while (y) {
                y /= 10;
                digits++;
        }
        char *s = (char *) malloc(sizeof(char) * (digits + 2)), *p = s, t;
        if ((sign = x) < 0)
                x = -x;
        do {
                s[i++] = x % 10 + '0';
        }
        while ((x /= 10));
        if (sign < 0)
                s[i++] = '-';
        s[i] = '\0';
        for (int k = 0, j = i - 1; k < j; k++, j--) {
                t = s[j];
                s[j] = p[k];
                p[k] = t;
        }
        return p;
}

4)
char *stranybyte(const char *s, const char *accept) {
        for (int i = 0; s[i] != '\0'; i++) {
                for (int j = 0; accept[j] != '\0'; j++) {
                        if (s[i] == accept[j])
                                return (char *)s + i;
                }
        }
        return NULL;
}

5)
long stringtoint(char *str) {
        long n = 0;
        int sign = 1;
        if (*str == '-') {
                sign = -1;
                str++;
        }
        for (int i = 0; str[i] != '\0' && str[i] >= '0' && str[i] <= '9'; i++)
                n = n * 10 + (str[i] - '0');
        return n * sign;
}

6)
char *strchar(char *str, char c) {
        int i;
        for (i = 0; str[i] != '\0'; i++) {
                if (str[i] == c)
                        return str + i;
        }
        if (str[i] == c)
                return str + i;
        return NULL;
}

7)
int strcasecompare(char *a, char *b) {
        char *p = a, *q = b;
        while (*p++ == *q++ && *p != '\0' && *q != '\0');
        if (*p == '\0' || *q == '\0') {
                if (*p == '\0' && *q != '\0')
                        return -1;
                else if (*q == '\0' && *p != '\0')
                        return 1;
                else
                        return 0;
        }
        else if (*p > *q) {
                return 1;
        }
        else {
                return -1;
        }
}
