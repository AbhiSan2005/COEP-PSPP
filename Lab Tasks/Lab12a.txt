1)
char *strchar(char *str, char ch) {
        if (*str == ch || *str == '\0')
                return str;
        else
                return strchar(str+1,ch);
        return NULL;
}

2)
#include <stdio.h>

int num_str_to_num_reverse(char *str) {
        if (*str != '\0')
                return 10 * num_str_to_num_reverse(str+1) + (*str - '0');
        else
                return 0;
}

int num_str_to_num(char *str) {
        int i;
        for (i = 0; str[i] != '\0'; i++);
        i--;
        for (int j = 0; i > j; j++, i--) {
                char temp = str[j];
                str[j] = str[i];
                str[i] = temp;
        }
        return num_str_to_num_reverse(str);
}

int main(void)
{
        char p[] = "1234";
        printf("%d\n", num_str_to_num(p));
        return 0;
}

3)
int mult(int a, int b) {
        if (b == 0)
                return 0;
        else if (b > 0)
                return a + mult(a,b-1);
        else
                return -a + mult(a,b+1);
        return -1;
}

4)
int strcompare(char *a, char *b) {
        if (*a == *b && *a == '\0')
                return 0;
        if (*a == *b)
                return strcompare(a+1,b+1);
        else if (*a > *b)
                return 1;
        else
                return -1;
}

5)//NOT RECURISVE
#include <stdio.h>
#include <stdlib.h>
#define BITSIZE 8
//THIS WILL FAIL FOR NUMBERS WITH BINARY EQUILAVENTS LARGER THAN BITSIZE SO CHANGE THE BITSIZE FOR THEM

char *reverse(char str[]) {
        int i;
        for (i = 0; str[i] != '\0'; i++);
        i--;
        for (int j = 0; i > j; j++, i--) {
                char temp = str[j];
                str[j] = str[i];
                str[i] = temp;
        }
        return str;
}

char *decimal_to_binary(int n, char p[]) {
        char *q = p;
        int j = 0;
        for (int i = n; i > 0; i /= 2)
                p[j++] = (i % 2) + '0';
        while (j < BITSIZE)
                p[j++] = '0';
        p[j] = '\0';
        return reverse(q);
}

int main(void)
{
        int n;
        scanf("%d", &n);
        char *p = (char *)malloc(sizeof(char) * BITSIZE + 1);
        for (int i = 0; i < BITSIZE; i++)
                p[i] = '0';
        p[BITSIZE] = '\0';
        printf("%s\n", decimal_to_binary(n,p));
        free(p);
        return 0;
}

6)
#include <stdio.h>

int column[1024];
void print_binary(int k, int r) {
        column[k] = -1;
        while (column[k] < 1) {
                column[k] = column[k] + 1;
                if (k < r - 1) {
                        print_binary(k + 1, r);
                }
                else {
                        for (int j = 0; j < r; j++)
                                printf("%d ", column[j]);
                        printf("\n");
                }
        }
}

int main(void)
{
        int n;
        scanf("%d", &n);
        print_binary(0,n);
        return 0;
}

7)
#include <stdio.h>

void swap(char **p, char **q) {
    char *t = *p;
    *p = *q;
    *q = t;
}

void print_permutations(char *str[], int len, int index) {
    if (index == len) {
        for (int i = 0; i < len; i++)
            printf("%s ", str[i]);
        printf("\n");
        return;
    }
    for (int i = index; i < len; i++) {
        swap(&str[index], &str[i]);
        print_permutations(str, len, index + 1);
        swap(&str[index], &str[i]);
    }
    return;
}

int main() {
    char *str[] = {"xx", "yy", "zz", "ww"};
    int len = 4;
    print_permutations(str, len, 0);
    return 0;
}
